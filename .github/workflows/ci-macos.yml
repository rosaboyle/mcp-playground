name: CI/CD Pipeline - macOS

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  # Allow manual triggering
  workflow_dispatch:

# Add permissions at the workflow level
permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-test-macos:
    runs-on: macos-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Lint code
        run: npm run lint || echo "Linting issues found"
        
      - name: Build project
        run: npm run build
        
      - name: Run tests
        run: npm test || echo "Tests failed"
        
      - name: Import Apple Developer Certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo $MACOS_CERTIFICATE | base64 --decode > $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P $MACOS_CERTIFICATE_PWD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Set key partition list (prevents UI prompts)
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          
          echo "Certificate imported successfully!"
        
      - name: Build Electron app for macOS
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          ELECTRON_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_FOR_PULL_REQUEST: true
        run: |
          # Get app info for debugging
          APP_ID=$(node -p "require('./package.json').build.appId")
          APP_VERSION=$(node -p "require('./package.json').version")
          echo "Building app $APP_ID version $APP_VERSION"
          
          # Build with code signing but without automatic notarization
          echo "Building with electron-builder..."
          npm run build
          
          # Ensure build directory exists
          mkdir -p build
          
          # Create simplified entitlements.mac.plist
          echo '<?xml version="1.0" encoding="UTF-8"?>' > build/entitlements.mac.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> build/entitlements.mac.plist
          echo '<plist version="1.0">' >> build/entitlements.mac.plist
          echo '<dict>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.cs.allow-jit</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.cs.allow-unsigned-executable-memory</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.cs.allow-dyld-environment-variables</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.cs.disable-library-validation</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.cs.debugger</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.network.client</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.network.server</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.files.user-selected.read-write</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.files.downloads.read-write</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.inherit</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.app-sandbox</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.files.all</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '  <key>com.apple.security.automation.apple-events</key>' >> build/entitlements.mac.plist
          echo '  <true/>' >> build/entitlements.mac.plist
          echo '</dict>' >> build/entitlements.mac.plist
          echo '</plist>' >> build/entitlements.mac.plist
          
          # Create simplified afterSign.js
          echo '// This is a placeholder for the afterSign hook' > build/afterSign.js
          echo '// The real notarization happens in the CI/CD script after the build' >> build/afterSign.js
          echo 'exports.default = async function () {' >> build/afterSign.js
          echo '  console.log("Skipping automatic notarization in afterSign hook");' >> build/afterSign.js
          echo '  return;' >> build/afterSign.js
          echo '};' >> build/afterSign.js
          
          # Debug electron-builder path
          echo "Debug: PATH environment variable contains node_modules/.bin:"
          echo $PATH | grep -q "node_modules/.bin" && echo "Yes" || echo "No"
          echo "Debug: electron-builder location"
          ls -la node_modules/.bin/electron-builder || echo "Not found in node_modules/.bin"
          
          # Run electron-builder with explicit disable of notarization
          DEBUG=electron-builder npx --no-install electron-builder build --mac \
            --config.mac.notarize=false \
            --config.mac.hardenedRuntime=true \
            --config.mac.gatekeeperAssess=false \
            --config.mac.identity="${APPLE_TEAM_ID}" \
            --config.afterSign=build/afterSign.js
          
          # Verify the app was actually signed correctly before attempting notarization
          APP_PATH=$(find release -name "*.app" | head -n 1)
          if [ -n "$APP_PATH" ]; then
            echo "Verifying code signature for $APP_PATH"
            codesign -vvv --deep --strict "$APP_PATH"
            SIGN_STATUS=$?
            if [ $SIGN_STATUS -eq 0 ]; then
              echo "✅ Code signature verification passed."
            else
              echo "❌ Code signature verification failed with status: $SIGN_STATUS"
              echo "Code signature issues must be fixed before notarization can succeed."
            fi
          else
            echo "No .app file found to verify signature."
          fi
          
          # Manual notarization after build if needed
          if [[ "${{ github.ref }}" == "refs/heads/main" && -n "$APPLE_ID" && -n "$APPLE_APP_SPECIFIC_PASSWORD" && -n "$APPLE_TEAM_ID" ]]; then
            echo "Notarizing application..."
            # Find the DMG file to notarize
            DMG_FILE=$(find release -name "*.dmg" | head -n 1)
            if [ -n "$DMG_FILE" ]; then
              echo "Found DMG file: $DMG_FILE"
              
              # Create a temporary file for the submission output
              SUBMIT_OUTPUT_FILE=$(mktemp)
              
              # Try using xcrun notarytool which is the newer recommended approach
              echo "Submitting app for notarization..."
              xcrun notarytool submit "$DMG_FILE" --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait --output-format json > $SUBMIT_OUTPUT_FILE 2>&1
              
              # Print full output for debugging
              echo "======================== NOTARIZATION SUBMISSION OUTPUT ========================"
              cat $SUBMIT_OUTPUT_FILE
              echo "=============================================================================="
              
              # Extract submission ID if available
              SUBMISSION_ID=$(cat $SUBMIT_OUTPUT_FILE | grep -o '"id": "[^"]*"' | cut -d'"' -f4)
              
              if [ -n "$SUBMISSION_ID" ]; then
                echo "Successfully got submission ID: $SUBMISSION_ID"
                echo "Fetching detailed notarization log for submission ID: $SUBMISSION_ID"
                xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" notarization.log
                
                echo "======================== NOTARIZATION LOG ========================"
                cat notarization.log
                echo "================================================================="
                
                # Check if we need to staple the ticket to the app
                NOTARIZATION_STATUS=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_APP_SPECIFIC_PASSWORD" --team-id "$APPLE_TEAM_ID" --output-format json | grep -o '"status": "[^"]*"' | cut -d'"' -f4)
                
                if [ "$NOTARIZATION_STATUS" == "Accepted" ]; then
                  echo "Notarization successful! Stapling ticket to application..."
                  xcrun stapler staple "$DMG_FILE"
                else
                  echo "Notarization failed with status: $NOTARIZATION_STATUS"
                fi
              else
                echo "Failed to get submission ID. Notarization failed."
                echo "Check the submission output above for more details."
              fi
              
              # Clean up temporary file
              rm -f $SUBMIT_OUTPUT_FILE
              
              echo "Notarization process complete"
            else
              echo "No DMG file found for notarization"
            fi
          else
            echo "Skipping notarization (not on main branch or missing credentials)"
          fi
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Upload build artifacts directly to S3
        run: |
          # Create build artifacts directory
          mkdir -p artifacts
          
          # Copy relevant files
          cp -r dist artifacts/
          cp -r release/*.dmg artifacts/
          cp -r release/*.zip artifacts/
          cp -r release/*.yml artifacts/
          
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "Current package version: $VERSION"
          
          # Upload to S3 with environment-specific path
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Upload to versioned directory (without --delete to preserve older versions)
            aws s3 sync artifacts/ s3://mcpx/builds/mac/$VERSION/
            
            # Upload to latest directory (with --delete to keep it clean)
            aws s3 sync artifacts/ s3://mcpx/builds/mac/latest/ --delete
          else
            # Upload to dev path
            aws s3 sync artifacts/ s3://mcpx/builds/mac/dev/ --delete
          fi
          
          echo "Build artifacts uploaded to S3 bucket"
          
  deploy-preview-macos:
    needs: build-and-test-macos
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to dev environment (S3)
        run: |
          echo "Deploying macOS build to dev environment..."
          # Copy from build location to the final deployment location
          aws s3 sync s3://mcpx/builds/mac/dev/ s3://mcpx/dev/ --delete
          
  deploy-production-macos:
    needs: build-and-test-macos
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Deploy to production (S3)
        run: |
          echo "Deploying macOS build to production environment..."
          # Copy from build location to the final deployment location
          aws s3 sync s3://mcpx/builds/mac/latest/ s3://mcpx/latest/ --delete 